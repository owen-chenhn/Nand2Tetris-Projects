class GluttonousSnake {
    /** Class of the game GluttonousSnake. 
        User input: only 5 keys. 
        To control the direction of a snake: left arrow, up arrow, right arrow, down arrow. 
        To freeze the snake on the screen: space. 
        All other keys have no effect. 

        Eating a piece of food can increment the length of snake by 1 pixel. 
        The game terminates when the head of the snake hits its body. 

        The snake is initialized as frozen (not moving) when the game starts. Press any arrow keys to let it move.
         
        Note: Pressing a reverse direction of snake's current direction also has no effect. Since the initialized default direction is set to the right, pressing 
        the left arrow when the game starts will not change its direction (to the right). 
    */

    field Snake s;
    field ListElement foodList;     // Maintain a double-linked list to represent each piece of food. When the snake eats a piece of food, remove this node from the list and add it to the snake. 
    field FoodScatter scatterer;    // Place foods on the screen and save their locations in foodList. 
    field int length;               // Set the initial length of the snake. 
    field int width;                // Set the width of the snake. It must be the power of 2 (can be 1). Recommend to set to 2 or 4. 

    constructor GluttonousSnake new() {
        // Configure the width and length of snake here. 
        let width = 2;
        let length = 32;
        let s = Snake.new(length, width);      // Initialize the length to be 32. 
        let scatterer = FoodScatter.new();
        let foodList = scatterer.scatter(width);    // It points to the dummy head of the list of foods.  
        return this;
    }

    method void run() {
        /** Run the game. */
        var char input;     // user input 

        do Output.printString("Instructions: use four arrows to control the snake.");
        do Output.moveCursor(1, 0);
        do Output.printString("Press space to freeze the snake.");
        do Output.moveCursor(2, 0);
        do Output.printString("Press arrows again to let it move.");
        while (s.move(foodList)) {
            // Wait for keyboard input (only four arrows and space are valid):
            do Sys.wait(55);       // 55 ms delay for user input
            let input = Keyboard.keyPressed();
            if (~(input = 0)) {
                if (input = 32) {       // If input is space:
                    do s.setFreeze(true);
                }
                else {
                    if (129 < input & input < 134) {
                        // One of 4 arrows is pressed:
                        do s.setFreeze(false);
                        if (~(s.getDir()=input)) {
                            do s.setDir(input);
                        }
                    }
                }
            }
        }
        // The snake is dead. Terminate the game. 
        do Output.moveCursor(11, 28);
        do Output.printString("Game over.");
        do terminate();
        return;
    }
    
    method void terminate() {
        /**The head of the snake hits its body. Game over. 
            Dispose the momory. 
        */
        do s.dispose();
        do scatterer.dispose();
        do foodList.dispose();
        do Memory.deAlloc(this);
        return;
    }
}